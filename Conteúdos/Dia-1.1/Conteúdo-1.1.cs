// Conhecendo os tipos de C#

// Tipos de Linguagens
int x;
decimal y;
bool z;

// Nomenclatura de vari√°veis
int numberOfOrdersInOctober;
int numberOfOrdersInNovember;
int numberOfOrdersInDecember;

// Interfaces de comunica√ß√£o com o programa
//Entrada de Dados
int Age = int.Parse(Console.ReadLine());
decimal Average = decimal.Parse(Console.ReadLine());
bool Permission = bool.Parse(Console.ReadLine());
string Name = Console.ReadLine();

//Entrada de Dados
int Age = int.Parse(Console.ReadLine());
decimal Average = decimal.Parse(Console.ReadLine());
bool Permission = bool.Parse(Console.ReadLine());
string Name = Console.ReadLine();

//Exemplo de concatena√ß√£o de Dados
int Number = 10;
string Name = "Trybe";
Console.WriteLine("O valor da vari√°vel numero √©: " + Number);
Console.WriteLine("Eu sou um estudante " + Name + "!");

// Outros Tipos de Dados do C#]
// Criando um enum
enum CardinalPoints
{
    Norte,
    Sul,
    Leste,
    Oeste
};
//Utilizando um enum
CardinalPoints direction = CardinalPoints.Norte;
Console.WriteLine("Ponto Cardeal: " + direction);

// Outros tipos de dados que representam n√∫meros inteiros

// Para termos um controle mais preciso, podemos utilizar tipos signed, que permitem o armazenamento de valores negativos, e os unsigned, cujos valores podem ser somente o 0 e valores positivos.

// Constantes
//Como declarar uma constante
const string url = "https://www.betrybe.com/";
const int numberOfAttemptsAllowed = 5;

// Vari√°veis com tipo impl√≠cito
//esta vari√°vel ser√° compilada como string
var school = "Trybe";

//esta vari√°vel ser√° compilada como int
var semester = 1;

//esta vari√°vel ser√° compilada como um tipo an√¥nimo
var student = new { name = "Jorge", age = 30 };

Console.WriteLine("Ol√°! Me chamo " + student.name + " " +
                  "sou um estudante da escola " + school + " " +
                  "estou no " + semester + "¬∫ semestre " +
                  "e tenho " + student.age + " anos");


// Opera√ß√µes Aritm√©ticas
//Adi√ß√£o
int a = 50, b = 50;
int result1 = a + b;
Console.WriteLine(a + " + " + b + " = " + result1);

//Subtra√ß√£o
int c = 77, d = 21;
int result2 = c - d;
Console.WriteLine(c + " - " + d + " = " + result2);

//Multiplica√ß√£o
int e = 5, f = 5;
int result3 = e * f;
Console.WriteLine(e + " * " + f + " = " + result3);

//divis√£o
int g = 90, h = 9;
int result4 = g / h;
Console.WriteLine(g + " / " + h + " = " + result4);

//m√≥dulo
int i = 36, j = 7;
int result5 = i % j;
Console.WriteLine("O resto da divis√£o de " + i + " por " + j + " √© " + result5);

// Ordem das express√µes
//ordem de execu√ß√£o
int a = 5, b = 10, c = 15;
int result1 = (a + b * c);
Console.WriteLine("(" + a + " + " + b + " * " + c + ") = " + result1);

//utilizando par√™nteses
int result2 = ((a + b) * c);
Console.WriteLine("((" + a + " + " + b + ") * " + c + ") = " + result2);

// Operadores Aritm√©ticos de Atribui√ß√£o reduzida
int a = 1;
//incrementa + 1 ao valor de a
a++; //substitui a instru√ß√£o a = a + 1 
Console.WriteLine("A = " + a);

int b = 10;
//decrementa o -1 ao valor b
b--; //substitui a instru√ß√£o b = b - 1
Console.WriteLine("B = " + b);

//incrementa qualquer valor √† direita na vari√°vel √† esquerda
int c = 23;
c += 15; //substitui a instru√ß√£o c = c + 15 
Console.WriteLine("C = " + c);

//incrementa multiplicando qualquer valor √† direita na vari√°vel √† esquerda
int e = 11;
e *= 3; //substitui a instru√ß√£o e = e * 3 
Console.WriteLine("E = " + e);

//decrementa dividindo qualquer valor √† direita na vari√°vel √† esquerda
decimal f = 11;
f /= 3; //substitui a instru√ß√£o f = f / 3 
Console.WriteLine("F = " + f.ToString("N2"));

//decrementa com a opera√ß√£o de m√≥dulo de qualquer valor √† direita na vari√°vel √† esquerda
decimal g = 11;
g %= 3; //substitui a instru√ß√£o g = g % 3 
Console.WriteLine("G = " + g.ToString("N2"));

// De olho na dicaüëÄ: Quando criamos testes com n√∫meros do tipo float podemos encontrar um problema bem recorrente! Em culturas espec√≠ficas, os n√∫meros do tipo float s√£o representados com , e em outras √© representado com .. Com isso, precisamos definir qual cultura estamos usando no projeto .NET com a instru√ß√£o:
Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US", false);